scalar Time

type AuthToken {
    token: String!
    expired_at: Time!
}

type AuthResponse {
    auth: AuthToken!
    user: User!
}

type User {
    id: String!
    name: String!
    email: String!
    password: String!
    createdAt: Time!
    updatedAt: Time!

    orders: [Order]
}

type Order {
    id: String!
    buyer: User!
    total_price: Float!
    details: [OrderDetail!]!
}

type OrderDetail {
    id: String!
    order: Order!
    item_name: String!
    item_price: Int!
    item_quantity: Int!
}

input NewUser {
    name: String!
    email: String!
    password: String!
}

input UpdateUser {
    name: String
    email: String
}

input FilterUser {
    name: String
    email: String
}

input LoginUserInput {
    email: String!
    password: String!
}

type Query {
    orders: [Order!]!
    users(input: FilterUser, limit: Int = 10, offset: Int = 0): [User!]!
    order(id: ID!): Order!
    user(id: ID!): User!
}

type Mutation {
    login(input: LoginUserInput!): AuthToken!
    createUser(input: NewUser!): AuthResponse!
    deleteUser(id: ID!): ID!
    updateUser(id: ID!, input: UpdateUser!): User!
}